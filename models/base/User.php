<?php

// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace app\models\base;

use mdm\admin\models\User as BasicUser;
use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "user".
 *
 * @property integer $id
 * @property string $username
 * @property string $auth_key
 * @property string $password_hash
 * @property string $password_reset_token
 * @property string $email
 * @property integer $status
 * @property integer $created_at
 * @property integer $updated_at
 * @property string $aliasModel
 * @property Usdt[] $usdts 
 * @property CryptoSignals[] $cryptoSignals 
 * @property ForexSignals[] $forexSignals 
 * @property string $fullname 
 * @property string|null $channel_link_telegram 
 * @property string|null $monthly_charge_offer 
 * @property string|null $three_months_offer 
 * @property string|null $all_till_offer 
 * @property string|null $verify_sgn_up
 * @property string|null $forget_password_token
 */
abstract class User extends BasicUser {

    /**
     * @inheritdoc
     */
    public static function tableName() {
        return 'user';
    }

    /**
     * @inheritdoc
     */
    public function behaviors() {
        return [
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules() {
        return [
            [['username'], 'required'],
            [['username'], 'email'],
            [['status', 'created_at', 'updated_at'], 'integer'],
            [['bio'], 'string'],
            [['username', 'auth_key'], 'string', 'max' => 32],
            [['password_hash', 'password_reset_token', 'email', 'photo',
            'back_photo', 'twitter', 'facebook',
            'tiktok', 'insta', 'contact_number', 'telegram_link',
            'fullname', 'channel_link_telegram', 'monthly_charge_offer', 'three_months_offer', 'all_till_offer', 'verify_sgn_up', 'forget_password_token'], 'string', 'max' => 255],
            [['username'], 'unique'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels() {
        return [
            'id' => Yii::t('app', 'ID'),
            'username' => Yii::t('app', 'Email'),
            'auth_key' => Yii::t('app', 'Auth Key'),
            'password_hash' => Yii::t('app', 'Password Hash'),
            'password_reset_token' => Yii::t('app', 'Password Reset Token'),
            'email' => Yii::t('app', 'Email'),
            'status' => Yii::t('app', 'Status'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'photo' => 'Photo',
            'back_photo' => 'Back Photo',
            'bio' => 'Bio',
            'twitter' => 'Twitter',
            'facebook' => 'Facebook',
            'tiktok' => 'Tiktok',
            'insta' => 'Insta',
            'contact_number' => 'Contact Number',
            'telegram_link' => 'Telegram Link',
            'fullname' => 'Fullname',
            'channel_link_telegram' => 'Channel Link Telegram',
            'monthly_charge_offer' => 'Monthly Charge Offer',
            'three_months_offer' => 'Three Months Offer',
            'all_till_offer' => 'All Till Offer',
            'verify_sgn_up' => 'Verify Sgn Up',
            'forget_password_token' => 'Forget Password Token',
        ];
    }

    public function getCryptoSignals() {
        return $this->hasMany(CryptoSignals::class, ['user_id' => 'id']);
    }

    public function getForexSignals() {
        return $this->hasMany(ForexSignals::class, ['user_id' => 'id']);
    }

    public function getUsdts() {
        return $this->hasMany(Usdt::class, ['user_id' => 'id']);
    }

}
